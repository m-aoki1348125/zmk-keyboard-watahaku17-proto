#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <28 29>;
            layers = <2>;
        };
    };

    // Auto mouse layer configuration

    input_processors {
        auto_mouse_layer: auto_mouse_layer {
            compatible = "zmk,input-processor-temp-layer";
            #input-processor-cells = <2>;
            require-prior-idle-ms = <500>;  // Require 500ms idle before activation
            excluded-positions = <1 2 3 10 11 12 13 14>;   // Don't deactivate layer on combo keys
        };

        auto_scroll_layer: auto_scroll_layer {
            compatible = "zmk,input-processor-temp-layer";
            #input-processor-cells = <2>;
            require-prior-idle-ms = <150>;  // Shorter idle time for scroll mode
            excluded-positions = <>;  // Deactivate on any key press
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
  &kp Q      &kp W         &kp E   &kp R   &kp T                  &kp Y                 &kp U          &kp I    &kp O      &kp P
  &kp A      &kp S         &kp D   &kp F   &kp G   &kp LC(TAB)    &kp RS(RG(LEFT_WIN))  &kp H          &kp J    &kp K      &kp L          &kp MINUS
  &kp Z      &kp X         &kp C   &kp V   &kp B   &kp SPACE      &kp ENTER             &kp N          &kp M    &kp COMMA  &kp PERIOD     &kp SLASH
  &kp LCTRL  &kp LEFT_GUI  &trans  &trans  &trans  &lt 2 LANG2    &lt 3 LANG1           &kp BACKSPACE  &kp DEL  &kp RCTRL  &kp RIGHT_ALT  &kp ESCAPE
            >;
        };

        mouse {
            bindings = <
  &trans  &trans  &mkp MB3  &trans    &trans            &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &mkp MB2  &mkp MB1  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans    &trans    &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans    &trans    &mo 4   &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_2 {
            bindings = <
  &kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)                    &kp LS(N6)     &kp LS(N7)     &kp LS(N8)        &kp LS(N9)         &kp LS(N0)
  &kp N1      &kp N2      &kp N3      &kp N4      &kp N5      &kp N6            &kp N7         &kp N8         &kp N9            &kp N0             &trans         &trans
  &trans      &trans      &trans      &trans      &trans      &kp LEFT_BRACE    &kp MINUS      &kp EQUAL      &kp RIGHT_BRACE   &kp COLON          &trans         &trans
  &trans      &trans      &trans      &trans      &trans      &trans            &kp LS(MINUS)  &kp LS(EQUAL)  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH  &kp TAB
            >;
        };

        layer_3 {
            bindings = <
  &kp F1        &kp F2        &kp F3      &kp F4   &kp F5               &kp HOME  &kp PG_UP  &kp PG_DN  &kp END   &kp ESC
  &kp F6        &kp F7        &kp F8      &kp F9   &kp F10  &kp LEFT    &kp DOWN  &kp UP     &kp RIGHT  &kp TAB   &kp F11  &kp F12
  &out OUT_USB  &out OUT_BLE  &bt BT_NXT  &trans   &trans   &kp SQT     &kp DQT   &kp GRAVE  &kp TILDE  &kp PIPE  &trans   &trans
  &trans        &trans        &kp DEL     &kp TAB  &trans   &trans      &trans    &trans     &trans     &trans    &trans   &trans
            >;
        };

        scroll {
            bindings = <
  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
